Core Java
------------
	IO
	MultiThreading
	JDBC
	Java 8 features

Java 8
	ArrayList<Integer> marks=new ArrayList<Integer>();
	an interface can have non abstract (static, default) methods
	Lambda
	Stream API



Lambda
	->

	this makes the implementation of functional interface, easier

What is a functional interface?
	an interface that has only 1 abstract method



Generics
	jdk 1.5
	before 1.5, the collections were always Object type

	ArrayList marks=new ArrayList();		jdk 1.4 or earlier
	ArrayList<Integer> marks=new ArrayList<Integer>();			jdk 1.5 onwards
	ArrayList<Integer> marks=new ArrayList<>();			jdk 1.7 onwards



public interface Person {
	void speak();
	
	static void walk()
	{
		System.out.println("The person walks");
	}
	
	default void run()
	{
		System.out.println("The person runs");
	}
}

//The above interface (person) is an example for Functional interface
Other examples:
	Runnable		(it has only 1 method called run())
	Comparable
	Comparator
	Predicate
	
the implement of these functional interfaces can be very simple, using lambda


public class Student implements Person
{

	@Override
	public void speak() {
		System.out.println("Student speaks");
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		Person.super.run();
		System.out.println("Student also runs");
	}
	
	

}



Stream API
--------------
	imagine, if you are allowed to query the collections, like SQL select statement

	SELECT
		WHERE
		ORDER BY
		GROUP BY

	result of an expression, is used as input for next expression and that goes on

	

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class StreamApp1 {

	public static void main(String[] args) {
		ArrayList<Employee> employeeList=new ArrayList<>();
		employeeList.add(new Employee(5L, "Raja", 12135.50, "EEE"));
		employeeList.add(new Employee(2L, "Abdul", 5342.50, "ECE"));
		employeeList.add(new Employee(1L, "Zaheer", 46365.50, "Civil"));
		employeeList.add(new Employee(4L, "Raja", 54555.50, "ECE"));
		employeeList.add(new Employee(2L, "Abdul", 3834985.50, "EEE"));
		employeeList.add(new Employee(3L, "Raja", 5995.50,"Civil"));
		employeeList.add(new Employee(1L, "Zaheer", 1125.50,"ECE"));
		
		List<Employee> result = employeeList.stream()
		.filter((t)->t.getDepartment().equals("EEE"))
		.filter((t)->t.getId()<3)
		.collect(Collectors.toList());
		
		for(Employee e:result)
		{
			System.out.println(e);
		}
	}

}




//for sorting
		List<Employee> result = employeeList.stream()
		.sorted((a,b)->b.getId().compareTo(a.getId()))
		.collect(Collectors.toList());




//group the employees by department and find the sum of salary

SELECT DEPARTMENT, SUM(SALARY) FROM EMPLOYEE
GROUP BY DEPARTMENT


-----------------------------------------------------------------------------------
Java IO

input output
	input may not always refers to keyboard
	input may be from any source
		keyboard
		mouse
		files
		network


	output may not always refers to monitor
		monitor
		files
		network

File
	is stored in storage	(secondary storage)
	what is the difference between storage and memory


File is in hard disk
	if a program has to read from a file,
	it cannot do directly from a storage.	It should be loaded into the memory as object. 
addition

when i load a file as an object in memory 
	File is the class in java.io package
		whose object can be used to represent a file as an object in memory



//		File f=new File("D:\\Jag\\CTS\\JFS004\\atchaya");		//File class can be used to create object representation of a File / Folder (directory)
		//					\n	\t		\\
		//poor practice to give the absolute path of a file / folder
		//because, when i move this project to some other computer
		//GOOD to use relative path		sub folder/ file name
		
		
//		File f=new File("atchaya.txt");
//		f.createNewFile();
		
		File f=new File("d:\\jag");
		//i can get the list of files and folders present in this location
		String[] arr = f.list();
		for(String s:arr)
		{
			System.out.println(s);
		}




File
	createNewFile
	

File handling

	read
	write

IO streams are seen as 2 types:
	character			every character is 2 bytes in unicode format
	byte/ binary		anything 		int, float, employee, String, Character


file extension .txt means text file		character stream

INPUT:
	read operations

	InputStream		all classes that are derived from InputStream, can read inputs in binary format
	Reader			--do--			Reader	can read inputs in character format


your answer can be text/ binary

	FileInputStream			binary
	FileReader				character
	ObjectInputStream			binary
	DataInputStream			binary
	BufferedReader
	BufferedInputStream			

OUTPUT:
	FileWriter				character
	BufferedWriter			character
	BufferedOutputStream		binary



i want to write characters into a file
	FileWriter

i want to read all the bytes from a file
	FileInputStream



C:\Users\rjaga\Pictures\paratta.jpg

	This file contains bytes.	(Can we call this file as a text file??		silly. NO, this is a binary file)


what we are going to read from this file?
	bytes 

Task:
	read all the  bytes from this file
	create a new file in new location and write all bytes into the new file


1) read all bytes as an array 
	write all bytes into the new file

2) read one byte from source
	write that by into the destination
	repeat until eof REACHED







if i am writing 
	bytes		FileOutputStream
	character		FileWriter
	primitive data	DataOutputStream		writeInt		writeFloat
	Objects		ObjectOutputStream





flush 		store
	reflect the changes we have done in the object rep of the file into the storage

	flush is called whenever close() is called

	when program terminates gracefully, close() is called automatically

swing
applets
frames
	windows based projects
	window is always open, then the file is not closed. UNLESS you use flush(), you will not see the data written into the file from other processes



whenever, we want to maintain structured data (like a record)
we use
	ObjectOutputStream		
	ObjectInputStream




import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class App4 {

	public static void main(String[] args)throws IOException {
//		DataOutputStream dos=new DataOutputStream(new FileOutputStream("D:\\Jag\\CTS\\JFS004\\atchaya\\jag.dat"));
//		dos.writeFloat(12.36f);
//		dos.writeInt(10);
//
//		dos.flush();
//		dos.close();
//
		
		DataInputStream dis=new DataInputStream(new FileInputStream("d:\\jag\\cts\\jfs004\\atchaya\\jag.dat"));
		
		System.out.println(dis.readInt());
		System.out.println(dis.readFloat());
	}

}




import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class App3 {
	public static void main(String[] args) throws IOException, InterruptedException
	{		
		FileInputStream fis=new FileInputStream("C:\\\\Users\\\\rjaga\\\\Pictures\\\\paratta.jpg");
		FileOutputStream fos=new FileOutputStream("D:\\Jag\\CTS\\JFS004\\atchaya\\paratta2.jpg");
		int data=-1;
		while((data=fis.read())!=-1)
		{
			fos.write(data);
//			Thread.sleep(10);
		}
		System.out.println("Completed");
	}
}







import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class App2 {

	public static void main(String[] args) throws IOException {
		File f1=new File("C:\\Users\\rjaga\\Pictures\\paratta.jpg");
		FileInputStream fis=new FileInputStream(f1);
		int len=(int) f1.length();
		byte [] data=new byte[len];
		
		fis.read(data);
		fis.close();
		System.out.println(len);
		
		//lets write the bytes to the new file
		FileOutputStream fos=new FileOutputStream("D:\\Jag\\CTS\\JFS004\\atchaya\\roti.jpg");
		fos.write(data);
		fos.flush();
		fos.close();
		System.out.println("Pls check ");
	}

}





import java.io.File;
import java.io.IOException;

public class App1 {

	public static void main(String[] args) throws IOException {
		
		File dir=new File("d:\\jag");
		
		if(!dir.exists())
		{
			System.out.println("Location is not found. Creating now...");
			dir.mkdir();
		}
		
		File[] files = dir.listFiles();
		System.out.println(files.length);
//		for(File f:files)
//		{
//			if(!f.isDirectory())
//			{
//				System.out.println(f.getName());
//			}
//		}
	}

}
